"use strict";(self.webpackChunkaps_samples_docs=self.webpackChunkaps_samples_docs||[]).push([[705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),s=n(6010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),s=n(7294),r=n(6010),o=n(2389),i=n(7392),l=n(7094),c=n(2466);const p="tabList__CuJ",u="tabItem_LNqP";function d(e){var t;const{lazy:n,block:o,defaultValue:d,values:m,groupId:f,className:h}=e,b=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=m??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,i.l)(v,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===d?d:d??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==k&&!v.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:y}=(0,l.U)(),[j,T]=(0,s.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=f){const e=w[f];null!=e&&e!==j&&v.some((t=>t.value===e))&&T(e)}const S=e=>{const t=e.currentTarget,n=N.indexOf(t),a=v[n].value;a!==j&&(C(t),T(a),null!=f&&y(f,String(a)))},O=e=>{var t;let n=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}null==(t=n)||t.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",p)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":o},h)},v.map((e=>{let{value:t,label:n,attributes:o}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,key:t,ref:e=>N.push(e),onKeyDown:O,onClick:S},o,{className:(0,r.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":j===t})}),n??t)}))),n?(0,s.cloneElement)(b.filter((e=>e.props.value===j))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==j})))))}function m(e){const t=(0,o.Z)();return s.createElement(d,(0,a.Z)({key:String(t)},e))}},9381:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),s=n(5488),r=n(5162);function o(e){let{NodeJsVsCode:t,DotNetVsCode:n,DotNetVs2022:o}=e;return a.createElement(s.Z,{groupId:"development-environment"},a.createElement(r.Z,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},a.createElement(t,null)),a.createElement(r.Z,{value:"dotnet-vscode",label:".NET 6 & VSCode"},a.createElement(n,null)),a.createElement(r.Z,{value:"dotnet-vs2022",label:".NET 6 & VS2022"},a.createElement(o,null)))}},5461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>k,default:()=>N,frontMatter:()=>g,metadata:()=>w,toc:()=>j});var a=n(7462),s=(n(7294),n(3905)),r=n(9381);const o={toc:[]};function i(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Let's implement the OSS (",(0,s.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/data/v2/developers_guide/basics/#object-storage-service-oss"},"Object Storage Service"),")\nlogic of our server application. Add the following code to the end of the ",(0,s.kt)("inlineCode",{parentName:"p"},"services/aps.js")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"service.ensureBucketExists = async (bucketKey) => {\n    try {\n        await new APS.BucketsApi().getBucketDetails(bucketKey, null, await service.getInternalToken());\n    } catch (err) {\n        if (err.response.status === 404) {\n            await new APS.BucketsApi().createBucket({ bucketKey, policyKey: 'temporary' }, {}, null, await service.getInternalToken());\n        } else {\n            throw err;\n        }\n    }\n};\n\nservice.listObjects = async () => {\n    await service.ensureBucketExists(APS_BUCKET);\n    let resp = await new APS.ObjectsApi().getObjects(APS_BUCKET, { limit: 64 }, null, await service.getInternalToken());\n    let objects = resp.body.items;\n    while (resp.body.next) {\n        const startAt = new URL(resp.body.next).searchParams.get('startAt');\n        resp = await new APS.ObjectsApi().getObjects(APS_BUCKET, { limit: 64, startAt }, null, await service.getInternalToken());\n        objects = objects.concat(resp.body.items);\n    }\n    return objects;\n};\n\nservice.uploadObject = async (objectName, filePath) => {\n    await service.ensureBucketExists(APS_BUCKET);\n    const buffer = await fs.promises.readFile(filePath);\n    const results = await new APS.ObjectsApi().uploadResources(\n        APS_BUCKET,\n        [{ objectKey: objectName, data: buffer }],\n        { useAcceleration: false, minutesExpiration: 15 },\n        null,\n        await service.getInternalToken()\n    );\n    if (results[0].error) {\n        throw results[0].completed;\n    } else {\n        return results[0].completed;\n    }\n};\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"ensureBucketExists")," function will simply try and request additional information\nabout a specific bucket using the ",(0,s.kt)("inlineCode",{parentName:"p"},"BucketsApi")," class from the APS SDK, and if the response\nfrom APS is ",(0,s.kt)("inlineCode",{parentName:"p"},"404 Not Found"),", it will attempt to create a new bucket with this name."),(0,s.kt)("p",null,"As you can see, the ",(0,s.kt)("inlineCode",{parentName:"p"},"getObjects")," method of the ",(0,s.kt)("inlineCode",{parentName:"p"},"ObjectsApi")," class (responsible for listing files\nin a Data Management bucket) uses pagination. In our code we simply iterate through all the pages\nand return all files from our application's bucket in a single list."))}i.isMDXComponent=!0;const l={toc:[]};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Let's implement the logic for converting designs for viewing, and for checking the status of\nthe conversions. Add the following code to the end of the ",(0,s.kt)("inlineCode",{parentName:"p"},"services/aps.js")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="services/aps.js"',title:'"services/aps.js"'},"service.translateObject = async (urn, rootFilename) => {\n    const job = {\n        input: { urn },\n        output: { formats: [{ type: 'svf', views: ['2d', '3d'] }] }\n    };\n    if (rootFilename) {\n        job.input.compressedUrn = true;\n        job.input.rootFilename = rootFilename;\n    }\n    const resp = await new APS.DerivativesApi().translate(job, {}, null, await service.getInternalToken());\n    return resp.body;\n};\n\nservice.getManifest = async (urn) => {\n    try {\n        const resp = await new APS.DerivativesApi().getManifest(urn, {}, null, await service.getInternalToken());\n        return resp.body;\n    } catch (err) {\n        if (err.response.status === 404) {\n            return null;\n        } else {\n            throw err;\n        }\n    }\n};\n\nservice.urnify = (id) => Buffer.from(id).toString('base64').replace(/=/g, '');\n")))}c.isMDXComponent=!0;const p={toc:[]};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"models.js")," file under the ",(0,s.kt)("inlineCode",{parentName:"p"},"routes")," subfolder with the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="routes/models.js"',title:'"routes/models.js"'},"const express = require('express');\nconst formidable = require('express-formidable');\nconst { listObjects, uploadObject, translateObject, getManifest, urnify } = require('../services/aps.js');\n\nlet router = express.Router();\n\nrouter.get('/api/models', async function (req, res, next) {\n    try {\n        const objects = await listObjects();\n        res.json(objects.map(o => ({\n            name: o.objectKey,\n            urn: urnify(o.objectId)\n        })));\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.get('/api/models/:urn/status', async function (req, res, next) {\n    try {\n        const manifest = await getManifest(req.params.urn);\n        if (manifest) {\n            let messages = [];\n            if (manifest.derivatives) {\n                for (const derivative of manifest.derivatives) {\n                    messages = messages.concat(derivative.messages || []);\n                    if (derivative.children) {\n                        for (const child of derivative.children) {\n                            messages.concat(child.messages || []);\n                        }\n                    }\n                }\n            }\n            res.json({ status: manifest.status, progress: manifest.progress, messages });\n        } else {\n            res.json({ status: 'n/a' });\n        }\n    } catch (err) {\n        next(err);\n    }\n});\n\nrouter.post('/api/models', formidable(), async function (req, res, next) {\n    const file = req.files['model-file'];\n    if (!file) {\n        res.status(400).send('The required field (\"model-file\") is missing.');\n        return;\n    }\n    try {\n        const obj = await uploadObject(file.name, file.path);\n        await translateObject(urnify(obj.objectId), req.fields['model-zip-entrypoint']);\n        res.json({\n            name: obj.objectKey,\n            urn: urnify(obj.objectId)\n        });\n    } catch (err) {\n        next(err);\n    }\n});\n\nmodule.exports = router;\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"formidable()")," middleware used in the ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," request handler will make sure that any\n",(0,s.kt)("inlineCode",{parentName:"p"},"multipart/form-data")," content coming with the request is parsed and available in the ",(0,s.kt)("inlineCode",{parentName:"p"},"req.files"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"req.fields")," properties.")),(0,s.kt)("p",null,"And mount the router to our server application by modifying ",(0,s.kt)("inlineCode",{parentName:"p"},"server.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="server.js"',title:'"server.js"'},"const express = require('express');\nconst { PORT } = require('./config.js');\n\nlet app = express();\napp.use(express.static('wwwroot'));\napp.use(require('./routes/auth.js'));\n// highlight-start\napp.use(require('./routes/models.js'));\n// highlight-end\napp.listen(PORT, function () { console.log(`Server listening on port ${PORT}...`); });\n")),(0,s.kt)("p",null,"The router will handle 3 types of requests:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"GET /api/models")," - when the client wants to get the list of all models available for viewing"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"GET /api/models/:urn/status")," - used to check the status of the conversion (incl. error messages if there are any)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"POST /api/models")," - when the client wants to upload a new model and start its translation")))}u.isMDXComponent=!0;const d={toc:[]};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"APS.Oss.cs")," file under the ",(0,s.kt)("inlineCode",{parentName:"p"},"Models")," folder. This is where will implement\nall the OSS (",(0,s.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/data/v2/developers_guide/basics/#object-storage-service-oss"},"Object Storage Service"),")\nlogic of our server application. Populate the new file with the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/APS.Oss.cs"',title:'"Models/APS.Oss.cs"'},'using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.Model;\n\npublic partial class APS\n{\n    private async Task EnsureBucketExists(string bucketKey)\n    {\n        var token = await GetInternalToken();\n        var api = new BucketsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        try\n        {\n            await api.GetBucketDetailsAsync(bucketKey);\n        }\n        catch (ApiException e)\n        {\n            if (e.ErrorCode == 404)\n            {\n                await api.CreateBucketAsync(new PostBucketsPayload(bucketKey, null, PostBucketsPayload.PolicyKeyEnum.Temporary));\n            }\n            else\n            {\n                throw e;\n            }\n        }\n    }\n\n    public async Task<ObjectDetails> UploadModel(string objectName, Stream content)\n    {\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var results = await api.uploadResources(_bucket, new List<UploadItemDesc> {\n            new UploadItemDesc(objectName, content)\n        });\n        if (results[0].Error) {\n            throw new Exception(results[0].completed.ToString());\n        } else {\n            var json = results[0].completed.ToJson();\n            return json.ToObject<ObjectDetails>();\n        }\n    }\n\n    public async Task<IEnumerable<ObjectDetails>> GetObjects()\n    {\n        const int PageSize = 64;\n        await EnsureBucketExists(_bucket);\n        var token = await GetInternalToken();\n        var api = new ObjectsApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var results = new List<ObjectDetails>();\n        var response = (await api.GetObjectsAsync(_bucket, PageSize)).ToObject<BucketObjects>();\n        results.AddRange(response.Items);\n        while (!string.IsNullOrEmpty(response.Next))\n        {\n            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(response.Next).Query);\n            response = (await api.GetObjectsAsync(_bucket, PageSize, null, queryParams["startAt"])).ToObject<BucketObjects>();\n            results.AddRange(response.Items);\n        }\n        return results;\n    }\n}\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"EnsureBucketExists")," method will simply try and request additional information\nabout a specific bucket, and if the response from APS is ",(0,s.kt)("inlineCode",{parentName:"p"},"404 Not Found"),", it will\nattempt to create a new bucket with that name. If no bucket name is provided through\nenvironment variables, we generate one by appending the ",(0,s.kt)("inlineCode",{parentName:"p"},"-basic-app")," suffix to our\napplication's Client ID."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"GetObjects")," method pages through all objects in the bucket, and returns their name and URN\n(the base64-encoded ID that will later be used when communicating with the Model Derivative service)."))}m.isMDXComponent=!0;const f={toc:[]};function h(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Create another file under the ",(0,s.kt)("inlineCode",{parentName:"p"},"Models")," subfolder, and call it ",(0,s.kt)("inlineCode",{parentName:"p"},"APS.Deriv.cs"),". This is where\nwill implement the logic for converting designs for viewing, and for checking the status of\nthe conversions. Populate the new file with the following code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Models/APS.Deriv.cs"',title:'"Models/APS.Deriv.cs"'},'using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Autodesk.Forge;\nusing Autodesk.Forge.Model;\n\npublic record TranslationStatus(string Status, string Progress, IEnumerable<string>? Messages);\n\npublic partial class APS\n{\n    public static string Base64Encode(string plainText)\n    {\n        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);\n        return System.Convert.ToBase64String(plainTextBytes).TrimEnd(\'=\');\n    }\n\n    public async Task<Job> TranslateModel(string objectId, string rootFilename)\n    {\n        var token = await GetInternalToken();\n        var api = new DerivativesApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var formats = new List<JobPayloadItem> {\n            new JobPayloadItem (JobPayloadItem.TypeEnum.Svf, new List<JobPayloadItem.ViewsEnum> { JobPayloadItem.ViewsEnum._2d, JobPayloadItem.ViewsEnum._3d })\n        };\n        var payload = new JobPayload(\n            new JobPayloadInput(Base64Encode(objectId)),\n            new JobPayloadOutput(formats)\n        );\n        if (!string.IsNullOrEmpty(rootFilename))\n        {\n            payload.Input.RootFilename = rootFilename;\n            payload.Input.CompressedUrn = true;\n        }\n        var job = (await api.TranslateAsync(payload)).ToObject<Job>();\n        return job;\n    }\n\n    public async Task<TranslationStatus> GetTranslationStatus(string urn)\n    {\n        var token = await GetInternalToken();\n        var api = new DerivativesApi();\n        api.Configuration.AccessToken = token.AccessToken;\n        var json = (await api.GetManifestAsync(urn)).ToJson();\n        var messages = new List<string>();\n        foreach (var message in json.SelectTokens("$.derivatives[*].messages[?(@.type == \'error\')].message"))\n        {\n            if (message.Type == Newtonsoft.Json.Linq.JTokenType.String)\n                messages.Add((string)message);\n        }\n        foreach (var message in json.SelectTokens("$.derivatives[*].children[*].messages[?(@.type == \'error\')].message"))\n        {\n            if (message.Type == Newtonsoft.Json.Linq.JTokenType.String)\n                messages.Add((string)message);\n        }\n        return new TranslationStatus((string)json["status"], (string)json["progress"], messages);\n    }\n}\n')))}h.isMDXComponent=!0;const b={toc:[]};function v(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"ModelsController.cs")," file under the ",(0,s.kt)("inlineCode",{parentName:"p"},"Controllers")," subfolder with the following content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp",metastring:'title="Controllers/ModelsController.cs"',title:'"Controllers/ModelsController.cs"'},'using System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Autodesk.Forge.Client;\n\n[ApiController]\n[Route("api/[controller]")]\npublic class ModelsController : ControllerBase\n{\n    public record BucketObject(string name, string urn);\n\n    private readonly APS _aps;\n\n    public ModelsController(APS aps)\n    {\n        _aps = aps;\n    }\n\n    [HttpGet()]\n    public async Task<IEnumerable<BucketObject>> GetModels()\n    {\n        var objects = await _aps.GetObjects();\n        return from o in objects\n               select new BucketObject(o.ObjectKey, APS.Base64Encode(o.ObjectId));\n    }\n\n    [HttpGet("{urn}/status")]\n    public async Task<TranslationStatus> GetModelStatus(string urn)\n    {\n        try\n        {\n            var status = await _aps.GetTranslationStatus(urn);\n            return status;\n        }\n        catch (ApiException ex)\n        {\n            if (ex.ErrorCode == 404)\n                return new TranslationStatus("n/a", "", new List<string>());\n            else\n                throw ex;\n        }\n    }\n\n    public class UploadModelForm\n    {\n        [FromForm(Name = "model-zip-entrypoint")]\n        public string? Entrypoint { get; set; }\n\n        [FromForm(Name = "model-file")]\n        public IFormFile File { get; set; }\n    }\n\n    [HttpPost()]\n    public async Task<BucketObject> UploadAndTranslateModel([FromForm] UploadModelForm form)\n    {\n        using (var stream = new MemoryStream())\n        {\n            await form.File.CopyToAsync(stream);\n            stream.Position = 0;\n            var obj = await _aps.UploadModel(form.File.FileName, stream);\n            var job = await _aps.TranslateModel(obj.ObjectId, form.Entrypoint);\n            return new BucketObject(obj.ObjectKey, job.Urn);\n        }\n    }\n}\n')),(0,s.kt)("p",null,"The controller will handle 3 types of requests:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"GET /api/models")," - when the client wants to get the list of all models available for viewing"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"GET /api/models/:urn/status")," - used to check the status of the conversion (incl. error messages if there are any)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"POST /api/models")," - when the client wants to upload a new model and start its translation")))}v.isMDXComponent=!0;const g={title:"Data & Derivatives"},k="Data & Derivatives",w={unversionedId:"tutorials/simple-viewer/data",id:"tutorials/simple-viewer/data",title:"Data & Derivatives",description:"In this step we will extend our server so that we can list models, upload them,",source:"@site/docs/tutorials/01-simple-viewer/03-data.mdx",sourceDirName:"tutorials/01-simple-viewer",slug:"/tutorials/simple-viewer/data",permalink:"/tutorials/simple-viewer/data",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/tutorials/01-simple-viewer/03-data.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Data & Derivatives"},sidebar:"tutorialSidebar",previous:{title:"Authentication",permalink:"/tutorials/simple-viewer/auth"},next:{title:"Viewer & UI",permalink:"/tutorials/simple-viewer/viewer"}},y={},j=[{value:"Data management",id:"data-management",level:2},{value:"Derivatives",id:"derivatives",level:2},{value:"Server endpoints",id:"server-endpoints",level:2},{value:"Try it out",id:"try-it-out",level:2}],T={toc:j};function N(e){let{components:t,...o}=e;return(0,s.kt)("wrapper",(0,a.Z)({},T,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"data--derivatives"},"Data & Derivatives"),(0,s.kt)("p",null,"In this step we will extend our server so that we can list models, upload them,\nand prepare them for viewing."),(0,s.kt)("h2",{id:"data-management"},"Data management"),(0,s.kt)("p",null,"First, let's make sure that our application has a bucket in the Data Management service\nto store its files in. Typically the bucket would be created just once as part of a provisioning\nstep but in our sample we will implement a helper function that will make sure that the bucket\nis available, and use it in other parts of the server app."),(0,s.kt)(r.Z,{NodeJsVsCode:i,DotNetVsCode:m,DotNetVs2022:m,mdxType:"EnvTabs"}),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"Note that the Data Management service requires bucket names to be ",(0,s.kt)("strong",{parentName:"p"},"globally unique"),",\nand attempts to create a bucket with an already used name will fail with ",(0,s.kt)("inlineCode",{parentName:"p"},"409 Conflict"),".\nSee the ",(0,s.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/data/v2/reference/http/buckets-POST"},"documentation"),"\nfor more details.")),(0,s.kt)("h2",{id:"derivatives"},"Derivatives"),(0,s.kt)("p",null,"Next, we will implement a couple of helper functions that will derive/extract various types of information\nfrom the uploaded files - for example, 2D drawings, 3D geometry, and metadata - that we can later load\ninto the Viewer in our webpage. To do so, we will need to start a new conversion job\nin the ",(0,s.kt)("a",{parentName:"p",href:"https://forge.autodesk.com/en/docs/model-derivative/v2/developers_guide/overview"},"Model Derivative"),"\nservice, and checking the status of the conversion."),(0,s.kt)("p",null,"Model Derivative service requires all IDs we use in the API calls to be ",(0,s.kt)("a",{parentName:"p",href:"https://wikipedia.org/wiki/Base64"},"base64"),"-encoded,\nso we include a small utility function that will help with that."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Base64-encoded IDs are referred to as ",(0,s.kt)("em",{parentName:"p"},"URNs"),".")),(0,s.kt)(r.Z,{NodeJsVsCode:c,DotNetVsCode:h,DotNetVs2022:h,mdxType:"EnvTabs"}),(0,s.kt)("h2",{id:"server-endpoints"},"Server endpoints"),(0,s.kt)("p",null,"Now let's make the new functionality available to the client through another\nset of endpoints."),(0,s.kt)(r.Z,{NodeJsVsCode:u,DotNetVsCode:v,DotNetVs2022:v,mdxType:"EnvTabs"}),(0,s.kt)("h2",{id:"try-it-out"},"Try it out"),(0,s.kt)("p",null,"Start (or restart) the app as usual, and navigate to ",(0,s.kt)("a",{parentName:"p",href:"http://localhost:8080/api/models"},"http://localhost:8080/api/models"),"\nin the browser. The server should respond with a JSON list with names and URNs of all objects\navailable in your configured bucket."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"If this is your first time working with APS, you may get a JSON response\nwith an empty array (",(0,s.kt)("inlineCode",{parentName:"p"},"[]"),") which is expected. In the screenshot below we can\nalready see a couple of files that were uploaded to our bucket in the past.")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"If you are using Google Chrome, consider installing ",(0,s.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"},"JSON Formatter"),"\nor a similar extension to automatically format JSON responses.")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Server Response",src:n(8948).Z,width:"1500",height:"929"})))}N.isMDXComponent=!0},8948:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/data-response-136a1ffb319991f74fc05f2b47c7fb39.webp"}}]);